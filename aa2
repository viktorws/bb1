#property strict

// Идентификатор объекта
#define PANEL_NAME "TradePanel"
#define BUTTON_PREFIX "PairButton_"
#define SPREAD_PREFIX "SpreadButton_"
#define PROFIT_PREFIX "ProfitButton_"
#define HEADER_PREFIX "HeaderButton_"
#define LOT_BUY_PREFIX "LotBuy_"
#define PROFIT_BUY_PREFIX "ProfitBuy_"
#define LOT_SELL_PREFIX "LotSell_"
#define PROFIT_SELL_PREFIX "ProfitSell_"

// Параметры панели

input double StopLossCurrency = 50.0;  // Стоп-лосс в валюте депозита
input double TakeProfitCurrency = 50.0; // Тейк-профит в валюте депозита

input int PANEL_WIDTH = 1020; // Ширина панели (увеличена для новых столбцов)
input int PANEL_HEIGHT = 980; // Высота панели
input int BOTTOM_MARGIN = 30; // Отступ снизу в пикселях
input int TOP_MARGIN = 20; // Отступ сверху в пикселях
input int SIDE_MARGIN = 10; // Отступ от края в пикселях
input int PANEL_POSITION = 0; // 0 - Лево-Верх, 1 - Право-Верх, 2 - Лево-Низ, 3 - Право-Низ
input color PANEL_BORDER_COLOR = clrBlack; // Цвет границы панели
input int PANEL_BORDER_WIDTH = 0; // Толщина границы панели
input color PANEL_BG_COLOR = C'20,20,20'; // Цвет фона панели
//input int PANEL_BG_TRANSPARENCY = 50; // Прозрачность фона (0-255)

input double LOT_STEP = 0.01; // Шаг изменения лота
input double MAX_LOT = 8.00; // Максимальный лот
input double MIN_LOT = 0.01;  // Минимальный лот



input int TRADES_COLUMN_WIDTH = 380; // Ширина столбца Trades
input int TRADES_COLUMN_SPACING = 50; // Отступ между столбцом Sell и Trades
input int LOT_BUTTON_WIDTH = 40; // Ширина кнопок изменения лота
input int LOT_DISPLAY_WIDTH = 60; // Ширина поля отображения лота
input int SELL_BUY_BUTTON_WIDTH = 60; // Ширина кнопок Sell и Buy
input int SELL_BUY_BUTTON_HEIGHT = 25; // Высота кнопок Sell и Buy


input color SELL_BUTTON_COLOR = clrRed; // Цвет кнопки Sell
input color BUY_BUTTON_COLOR = clrGreen; // Цвет кнопки Buy
input color SELL_BUTTON_BG_COLOR = C'10,10,10'; // Цвет фона кнопки Sell
input color BUY_BUTTON_BG_COLOR = C'10,10,10'; // Цвет фона кнопки Buy
input color LOT_BUTTON_COLOR = C'40,40,40'; // Цвет кнопок изменения лота


// Параметры кнопок
input int BUTTON_WIDTH = 120; // Ширина кнопки
input int BUTTON_HEIGHT = 25; // Высота кнопки
input int SPREAD_BUTTON_WIDTH = 50; // Ширина кнопки Spread
input int PROFIT_BUTTON_WIDTH = 80; // Ширина кнопки Profit
input int BUTTON_SPACING = 5; // Расстояние между кнопками
input color BUTTON_BG_COLOR = C'40,40,40'; // Цвет фона кнопки
input color BUTTON_TEXT_COLOR = clrLavender; // Цвет текста кнопки
input color BUTTON_BORDER_COLOR = clrBlack; // Цвет границы кнопки
input int BUTTON_BORDER_WIDTH = 1; // Толщина границы кнопки

// Параметры "статичных кнопок" для спредов и заголовков
//input int SPREAD_BUTTON_WIDTH = 60; // Ширина кнопки для спреда
input int SPREAD_BUTTON_HEIGHT = 25; // Высота кнопки для спреда
input color SPREAD_BUTTON_BG_COLOR = C'10,10,10'; // Цвет фона кнопки для спреда
input color SPREAD_BUTTON_TEXT_COLOR = clrLavender; // Цвет текста кнопки для спреда
input color SPREAD_BUTTON_BORDER_COLOR = clrBlack; // Цвет границы кнопки для спреда
input int COLUMN_SPACING = 10; // Отступ между столбцами
input int HEADER_SPACING = 5; // Отступ заголовков от столбцов

// Параметры для новых столбцов
input int LOT_BUY_WIDTH = 50; // Ширина столбца Lot Buy
input int PROFIT_BUY_WIDTH = 80; // Ширина столбца Profit Buy
input int LOT_SELL_WIDTH = 50; // Ширина столбца Lot Sell
input int PROFIT_SELL_WIDTH = 80; // Ширина столбца Profit Sell

input int PROFIT_RIGHT_MARGIN = 20; // Отступ справа от столбца Profit

// Параметры отступов внутри блока
input int CONTENT_PADDING_LEFT = 20; // Отступ слева
input int CONTENT_PADDING_RIGHT = 10; // Отступ справа
input int CONTENT_PADDING_TOP = 10; // Отступ сверху
input int CONTENT_PADDING_BOTTOM = 10; // Отступ снизу

// Глобальные параметры шрифта
input string GLOBAL_FONT = "Arial"; // Шрифт для всей панели
input int GLOBAL_FONT_SIZE = 8; // Размер шрифта для всей панели


// Глобальные переменные для хранения размеров графика
int prevChartWidth = 0;
int prevChartHeight = 0;
int leftOffset = 50; // Отступ слева в пикселях (можно менять)




double currentLot = 0.01; // Текущий лот
double currentLots[]; // Массив для хранения лотов








int ArraySearch(const string &array[], string value)
{
   for(int i = 0; i < ArraySize(array); i++)
   {
      if(array[i] == value)
      {
         return i; // Возвращаем индекс, если элемент найден
      }
   }
   return -1; // Возвращаем -1, если элемент не найден
}








string currentSymbol = "";
// Массив валютных пар
string currencyPairs[] = {"EURUSD", "GBPUSD", "USDJPY", "USDCHF", "USDCAD", "AUDUSD", "NZDUSD",
                          "EURGBP", "EURJPY", "EURCHF", "EURCAD", "EURAUD", "EURNZD",
                          "GBPJPY", "GBPCHF", "GBPCAD", "GBPAUD", "GBPNZD",
                          "AUDJPY", "AUDCHF", "AUDCAD", "AUDNZD",
                          "NZDJPY", "NZDCHF", "NZDCAD",
                          "CADJPY", "CADCHF",
                          "CHFJPY"};











void UpdatePanel()
{
   if(ObjectFind(PANEL_NAME) < 0)
      return;
   
   int chartWidth = (int)ChartGetInteger(0, CHART_WIDTH_IN_PIXELS);
   int chartHeight = (int)ChartGetInteger(0, CHART_HEIGHT_IN_PIXELS) - BOTTOM_MARGIN;
   
   int x = SIDE_MARGIN;
   int y = TOP_MARGIN;
   
   switch(PANEL_POSITION)
   {
      case 1: // Право-Верх
         x = chartWidth - PANEL_WIDTH - SIDE_MARGIN;
         break;
      case 2: // Лево-Низ
         y = chartHeight - PANEL_HEIGHT;
         break;
      case 3: // Право-Низ
         x = chartWidth - PANEL_WIDTH - SIDE_MARGIN;
         y = chartHeight - PANEL_HEIGHT;
         break;
   }
   
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_XSIZE, PANEL_WIDTH);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_YSIZE, PANEL_HEIGHT);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_XDISTANCE, x);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_YDISTANCE, y);

   // Обновляем позиции кнопок OPEN ORDERS
   int startX = SIDE_MARGIN + CONTENT_PADDING_LEFT + SPREAD_BUTTON_WIDTH + COLUMN_SPACING + BUTTON_WIDTH + COLUMN_SPACING + PROFIT_BUTTON_WIDTH + PROFIT_RIGHT_MARGIN + LOT_BUY_WIDTH + PROFIT_BUY_WIDTH + LOT_SELL_WIDTH + PROFIT_SELL_WIDTH + TRADES_COLUMN_SPACING;
   int startY = TOP_MARGIN + CONTENT_PADDING_TOP;

   ObjectSetInteger(0, HEADER_PREFIX + "OpenOrders", OBJPROP_XDISTANCE, startX);
   ObjectSetInteger(0, HEADER_PREFIX + "OpenOrders", OBJPROP_YDISTANCE, startY + HEADER_SPACING);

   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      int yOffset = startY + CONTENT_PADDING_TOP + (i + 1) * (BUTTON_HEIGHT + BUTTON_SPACING);
      string symbol = currencyPairs[i];

      ObjectSetInteger(0, "SellButton_" + symbol, OBJPROP_XDISTANCE, startX);
      ObjectSetInteger(0, "SellButton_" + symbol, OBJPROP_YDISTANCE, yOffset);

      ObjectSetInteger(0, "Minus0.1_" + symbol, OBJPROP_XDISTANCE, startX + SELL_BUY_BUTTON_WIDTH + COLUMN_SPACING);
      ObjectSetInteger(0, "Minus0.1_" + symbol, OBJPROP_YDISTANCE, yOffset);

      ObjectSetInteger(0, "Minus0.01_" + symbol, OBJPROP_XDISTANCE, startX + SELL_BUY_BUTTON_WIDTH + COLUMN_SPACING + LOT_BUTTON_WIDTH);
      ObjectSetInteger(0, "Minus0.01_" + symbol, OBJPROP_YDISTANCE, yOffset);

      ObjectSetInteger(0, "LotDisplay_" + symbol, OBJPROP_XDISTANCE, startX + SELL_BUY_BUTTON_WIDTH + 2 * COLUMN_SPACING + 2 * LOT_BUTTON_WIDTH);
      ObjectSetInteger(0, "LotDisplay_" + symbol, OBJPROP_YDISTANCE, yOffset);

      ObjectSetInteger(0, "Plus0.01_" + symbol, OBJPROP_XDISTANCE, startX + SELL_BUY_BUTTON_WIDTH + 3 * COLUMN_SPACING + 2 * LOT_BUTTON_WIDTH + LOT_DISPLAY_WIDTH);
      ObjectSetInteger(0, "Plus0.01_" + symbol, OBJPROP_YDISTANCE, yOffset);

      ObjectSetInteger(0, "Plus0.1_" + symbol, OBJPROP_XDISTANCE, startX + SELL_BUY_BUTTON_WIDTH + 3 * COLUMN_SPACING + 3 * LOT_BUTTON_WIDTH + LOT_DISPLAY_WIDTH);
      ObjectSetInteger(0, "Plus0.1_" + symbol, OBJPROP_YDISTANCE, yOffset);

      ObjectSetInteger(0, "BuyButton_" + symbol, OBJPROP_XDISTANCE, startX + SELL_BUY_BUTTON_WIDTH + 4 * COLUMN_SPACING + 4 * LOT_BUTTON_WIDTH + LOT_DISPLAY_WIDTH);
      ObjectSetInteger(0, "BuyButton_" + symbol, OBJPROP_YDISTANCE, yOffset);
   }
}






// Функция создания кнопки
void CreateButton(string name, int x, int y, int width, int height, string text, color bgColor, color textColor, color borderColor, int borderWidth, bool clickable = true)
{
   if(ObjectFind(name) < 0)
   {
      if(!ObjectCreate(0, name, OBJ_BUTTON, 0, 0, 0))
      {
         Print("Ошибка создания кнопки: ", name);
         return;
      }
      ObjectSetString(0, name, OBJPROP_TEXT, text);
      ObjectSetInteger(0, name, OBJPROP_XSIZE, width);
      ObjectSetInteger(0, name, OBJPROP_YSIZE, height);
      ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
      ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
      ObjectSetInteger(0, name, OBJPROP_CORNER, 0);
      ObjectSetInteger(0, name, OBJPROP_BACK, false); // Устанавливаем кнопку на передний план
      ObjectSetInteger(0, name, OBJPROP_HIDDEN, false);
      ObjectSetInteger(0, name, OBJPROP_BORDER_TYPE, BORDER_RAISED);
      ObjectSetInteger(0, name, OBJPROP_COLOR, textColor);
      ObjectSetInteger(0, name, OBJPROP_BGCOLOR, bgColor);
      ObjectSetInteger(0, name, OBJPROP_BORDER_COLOR, borderColor);
      ObjectSetInteger(0, name, OBJPROP_WIDTH, borderWidth);
      ObjectSetString(0, name, OBJPROP_FONT, GLOBAL_FONT);
      ObjectSetInteger(0, name, OBJPROP_FONTSIZE, GLOBAL_FONT_SIZE);
      ObjectSetInteger(0, name, OBJPROP_SELECTABLE, clickable);
      ObjectSetInteger(0, name, OBJPROP_ZORDER, 1000); // Высокий ZORDER для кнопки
   }
}



void CreateCurrencyButtons()
{
   int startY = TOP_MARGIN + CONTENT_PADDING_TOP; // Отступ для заголовков
   int spreadX = SIDE_MARGIN + CONTENT_PADDING_LEFT; // Спреды слева
   int buttonX = spreadX + SPREAD_BUTTON_WIDTH + COLUMN_SPACING; // Валютные пары справа
   int profitX = buttonX + BUTTON_WIDTH + COLUMN_SPACING; // Профит справа от валютных пар
   int lotBuyX = profitX + PROFIT_BUTTON_WIDTH + PROFIT_RIGHT_MARGIN; // Lot Buy
   int lotSellX = lotBuyX + LOT_BUY_WIDTH + PROFIT_BUY_WIDTH + 2 * COLUMN_SPACING; // Lot Sell
   int openOrdersX = lotSellX + LOT_SELL_WIDTH + PROFIT_SELL_WIDTH + TRADES_COLUMN_SPACING; // OPEN ORDERS

   // Заголовки столбцов
   CreateButton(HEADER_PREFIX + "Spread", spreadX, startY + HEADER_SPACING, SPREAD_BUTTON_WIDTH, SPREAD_BUTTON_HEIGHT, "Spread", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);
   CreateButton(HEADER_PREFIX + "Trades", buttonX, startY + HEADER_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT, "Trades", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);
   CreateButton(HEADER_PREFIX + "Profit", profitX, startY + HEADER_SPACING, PROFIT_BUTTON_WIDTH, SPREAD_BUTTON_HEIGHT, "Profit", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);

   // Новые объединенные заголовки
   int buyHeaderWidth = LOT_BUY_WIDTH + PROFIT_BUY_WIDTH + COLUMN_SPACING; // Ширина заголовка BUY
   int sellHeaderWidth = LOT_SELL_WIDTH + PROFIT_SELL_WIDTH + COLUMN_SPACING; // Ширина заголовка SELL

   CreateButton(HEADER_PREFIX + "BUY", lotBuyX, startY + HEADER_SPACING, buyHeaderWidth, BUTTON_HEIGHT, "BUY", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);
   CreateButton(HEADER_PREFIX + "SELL", lotSellX, startY + HEADER_SPACING, sellHeaderWidth, BUTTON_HEIGHT, "SELL", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);

   // Заголовок OPEN ORDERS
   CreateButton(HEADER_PREFIX + "OpenOrders", openOrdersX, startY + HEADER_SPACING, TRADES_COLUMN_WIDTH, BUTTON_HEIGHT, "OPEN ORDERS", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);

   // Создание кнопок для валютных пар
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string buttonName = BUTTON_PREFIX + currencyPairs[i];
      string spreadName = SPREAD_PREFIX + currencyPairs[i];
      string profitName = PROFIT_PREFIX + currencyPairs[i];
      string lotBuyName = LOT_BUY_PREFIX + currencyPairs[i];
      string profitBuyName = PROFIT_BUY_PREFIX + currencyPairs[i];
      string lotSellName = LOT_SELL_PREFIX + currencyPairs[i];
      string profitSellName = PROFIT_SELL_PREFIX + currencyPairs[i];
      int yOffset = startY + CONTENT_PADDING_TOP + (i + 1) * (BUTTON_HEIGHT + BUTTON_SPACING);

      // Создание кнопки для спреда
      CreateButton(spreadName, spreadX, yOffset, SPREAD_BUTTON_WIDTH, SPREAD_BUTTON_HEIGHT, "N/A", SPREAD_BUTTON_BG_COLOR, SPREAD_BUTTON_TEXT_COLOR, SPREAD_BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);
      
      // Создание кнопки для валютной пары
      CreateButton(buttonName, buttonX, yOffset, BUTTON_WIDTH, BUTTON_HEIGHT, currencyPairs[i], BUTTON_BG_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);
      
      // Создание кнопки для профита
      CreateButton(profitName, profitX, yOffset, PROFIT_BUTTON_WIDTH, SPREAD_BUTTON_HEIGHT, "0.00", SPREAD_BUTTON_BG_COLOR, clrLavender, SPREAD_BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);

      // Кнопки для Lot Buy и Profit Buy
      CreateButton(lotBuyName, lotBuyX, yOffset, LOT_BUY_WIDTH, BUTTON_HEIGHT, "0.00", BUTTON_BG_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);
      CreateButton(profitBuyName, lotBuyX + LOT_BUY_WIDTH + COLUMN_SPACING, yOffset, PROFIT_BUY_WIDTH, BUTTON_HEIGHT, "0.00", BUTTON_BG_COLOR, clrLavender, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);

      // Кнопки для Lot Sell и Profit Sell
      CreateButton(lotSellName, lotSellX, yOffset, LOT_SELL_WIDTH, BUTTON_HEIGHT, "0.00", BUTTON_BG_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);
      CreateButton(profitSellName, lotSellX + LOT_SELL_WIDTH + COLUMN_SPACING, yOffset, PROFIT_SELL_WIDTH, BUTTON_HEIGHT, "0.00", BUTTON_BG_COLOR, clrLavender, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);
   }

   // Поле "Total Profit" под кнопками валют
   int totalProfitY = startY + CONTENT_PADDING_TOP + (ArraySize(currencyPairs) + 1) * (BUTTON_HEIGHT + BUTTON_SPACING);
   int totalProfitWidth = SPREAD_BUTTON_WIDTH + COLUMN_SPACING + BUTTON_WIDTH; // Ширина кнопки (Спред + Валюты)
   CreateButton("TotalProfitLabel", spreadX, totalProfitY, totalProfitWidth, BUTTON_HEIGHT, "Total Profit", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);

   // Кнопка с общей прибылью под кнопками профитов
   CreateButton("TotalProfitValue", profitX, totalProfitY, PROFIT_BUTTON_WIDTH, BUTTON_HEIGHT, "0.00", SPREAD_BUTTON_BG_COLOR, clrLavender, SPREAD_BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);
}





// Функция обновления спредов
void UpdateSpreads()
{
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string spreadName = SPREAD_PREFIX + currencyPairs[i];
      double spread = MarketInfo(currencyPairs[i], MODE_SPREAD);
      if(spread > 0) // Проверяем, доступен ли спред
      {
         ObjectSetString(0, spreadName, OBJPROP_TEXT, DoubleToString(spread, 1));
      }
      else
      {
         ObjectSetString(0, spreadName, OBJPROP_TEXT, "N/A");
      }
   }
}



// Функция обновления профита
void UpdateProfits()
{
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string profitName = PROFIT_PREFIX + currencyPairs[i];
      double profit = CalculateProfitForSymbol(currencyPairs[i]);
      ObjectSetString(0, profitName, OBJPROP_TEXT, DoubleToString(profit, 2));
      
      // Изменение цвета текста в зависимости от прибыли
      if(profit == 0) // Если прибыль равна нулю
         ObjectSetInteger(0, profitName, OBJPROP_COLOR, clrLavender);
      else if(profit > 0) // Если прибыль положительная
         ObjectSetInteger(0, profitName, OBJPROP_COLOR, clrLime);
      else // Если прибыль отрицательная
         ObjectSetInteger(0, profitName, OBJPROP_COLOR, clrRed);
   }
}

// Функция расчета профита для символа
double CalculateProfitForSymbol(string symbol)
{
   double totalProfit = 0;
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS) && OrderSymbol() == symbol)
      {
         totalProfit += OrderProfit() + OrderSwap() + OrderCommission();
      }
   }
   return totalProfit;
}



double CalculateTotalProfit()
{
   double totalProfit = 0;
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS))
      {
         totalProfit += OrderProfit() + OrderSwap() + OrderCommission();
      }
   }
   return totalProfit;
}





// Функция обновления Lot Buy и Profit Buy
void UpdateBuyColumns()
{
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string lotBuyName = LOT_BUY_PREFIX + currencyPairs[i];
      string profitBuyName = PROFIT_BUY_PREFIX + currencyPairs[i];
      double lotBuy = 0;
      double profitBuy = 0;

      for(int j = 0; j < OrdersTotal(); j++)
      {
         if(OrderSelect(j, SELECT_BY_POS) && OrderSymbol() == currencyPairs[i] && OrderType() == OP_BUY)
         {
            lotBuy += OrderLots();
            profitBuy += OrderProfit() + OrderSwap() + OrderCommission();
         }
      }

      ObjectSetString(0, lotBuyName, OBJPROP_TEXT, DoubleToString(lotBuy, 2));
      ObjectSetString(0, profitBuyName, OBJPROP_TEXT, DoubleToString(profitBuy, 2));
      
      // Изменение цвета текста в зависимости от прибыли
      if(profitBuy == 0) // Если прибыль равна нулю
         ObjectSetInteger(0, profitBuyName, OBJPROP_COLOR, clrLavender);
      else if(profitBuy > 0) // Если прибыль положительная
         ObjectSetInteger(0, profitBuyName, OBJPROP_COLOR, clrLime);
      else // Если прибыль отрицательная
         ObjectSetInteger(0, profitBuyName, OBJPROP_COLOR, clrRed);
   }
}

// Функция обновления Lot Sell и Profit Sell
void UpdateSellColumns()
{
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string lotSellName = LOT_SELL_PREFIX + currencyPairs[i];
      string profitSellName = PROFIT_SELL_PREFIX + currencyPairs[i];
      double lotSell = 0;
      double profitSell = 0;

      for(int j = 0; j < OrdersTotal(); j++)
      {
         if(OrderSelect(j, SELECT_BY_POS) && OrderSymbol() == currencyPairs[i] && OrderType() == OP_SELL)
         {
            lotSell += OrderLots();
            profitSell += OrderProfit() + OrderSwap() + OrderCommission();
         }
      }

      ObjectSetString(0, lotSellName, OBJPROP_TEXT, DoubleToString(lotSell, 2));
      ObjectSetString(0, profitSellName, OBJPROP_TEXT, DoubleToString(profitSell, 2));
      
      // Изменение цвета текста в зависимости от прибыли
      if(profitSell == 0) // Если прибыль равна нулю
         ObjectSetInteger(0, profitSellName, OBJPROP_COLOR, clrLavender);
      else if(profitSell > 0) // Если прибыль положительная
         ObjectSetInteger(0, profitSellName, OBJPROP_COLOR, clrLime);
      else // Если прибыль отрицательная
         ObjectSetInteger(0, profitSellName, OBJPROP_COLOR, clrRed);
   }
}





void CreateTradeControls()
{
   int startX = SIDE_MARGIN + CONTENT_PADDING_LEFT + SPREAD_BUTTON_WIDTH + COLUMN_SPACING + BUTTON_WIDTH + COLUMN_SPACING + PROFIT_BUTTON_WIDTH + PROFIT_RIGHT_MARGIN + LOT_BUY_WIDTH + PROFIT_BUY_WIDTH + LOT_SELL_WIDTH + PROFIT_SELL_WIDTH + TRADES_COLUMN_SPACING;
   int startY = TOP_MARGIN + CONTENT_PADDING_TOP;

   // Удаляем старый заголовок OPEN ORDERS, если он существует
   ObjectDelete(HEADER_PREFIX + "OpenOrders");

   // Заголовок OPEN ORDERS
   CreateButton(HEADER_PREFIX + "OpenOrders", startX, startY + HEADER_SPACING, TRADES_COLUMN_WIDTH, BUTTON_HEIGHT, "OPEN ORDERS", C'0,0,0', clrLavender, clrBlack, BUTTON_BORDER_WIDTH, false);

   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      int yOffset = startY + CONTENT_PADDING_TOP + (i + 1) * (BUTTON_HEIGHT + BUTTON_SPACING);
      string symbol = currencyPairs[i];

      // Удаляем старые объекты, если они существуют
      ObjectDelete("SellButton_" + symbol);
      ObjectDelete("Minus0.1_" + symbol);
      ObjectDelete("Minus0.01_" + symbol);
      ObjectDelete("LotDisplay_" + symbol);
      ObjectDelete("Plus0.01_" + symbol);
      ObjectDelete("Plus0.1_" + symbol);
      ObjectDelete("BuyButton_" + symbol);

      // Кнопка Sell
      CreateButton("SellButton_" + symbol, startX, yOffset, SELL_BUY_BUTTON_WIDTH, SELL_BUY_BUTTON_HEIGHT, "Sell", SELL_BUTTON_BG_COLOR, SELL_BUTTON_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);

      // Кнопки для изменения лота
      CreateButton("Minus0.1_" + symbol, startX + SELL_BUY_BUTTON_WIDTH + COLUMN_SPACING, yOffset, LOT_BUTTON_WIDTH, BUTTON_HEIGHT, "-0.1", LOT_BUTTON_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);
      CreateButton("Minus0.01_" + symbol, startX + SELL_BUY_BUTTON_WIDTH + COLUMN_SPACING + LOT_BUTTON_WIDTH, yOffset, LOT_BUTTON_WIDTH, BUTTON_HEIGHT, "-0.01", LOT_BUTTON_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);

      // Поле для отображения лота
      CreateButton("LotDisplay_" + symbol, startX + SELL_BUY_BUTTON_WIDTH + 2 * COLUMN_SPACING + 2 * LOT_BUTTON_WIDTH, yOffset, LOT_DISPLAY_WIDTH, BUTTON_HEIGHT, DoubleToString(currentLots[i], 2), BUTTON_BG_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH, false);

      // Кнопки для увеличения лота
      CreateButton("Plus0.01_" + symbol, startX + SELL_BUY_BUTTON_WIDTH + 3 * COLUMN_SPACING + 2 * LOT_BUTTON_WIDTH + LOT_DISPLAY_WIDTH, yOffset, LOT_BUTTON_WIDTH, BUTTON_HEIGHT, "+0.01", LOT_BUTTON_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);
      CreateButton("Plus0.1_" + symbol, startX + SELL_BUY_BUTTON_WIDTH + 3 * COLUMN_SPACING + 3 * LOT_BUTTON_WIDTH + LOT_DISPLAY_WIDTH, yOffset, LOT_BUTTON_WIDTH, BUTTON_HEIGHT, "+0.1", LOT_BUTTON_COLOR, BUTTON_TEXT_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);

      // Кнопка Buy
      CreateButton("BuyButton_" + symbol, startX + SELL_BUY_BUTTON_WIDTH + 4 * COLUMN_SPACING + 4 * LOT_BUTTON_WIDTH + LOT_DISPLAY_WIDTH, yOffset, SELL_BUY_BUTTON_WIDTH, SELL_BUY_BUTTON_HEIGHT, "Buy", BUY_BUTTON_BG_COLOR, BUY_BUTTON_COLOR, BUTTON_BORDER_COLOR, BUTTON_BORDER_WIDTH);
   }
}



void UpdateButtonColors()
{
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string buttonName = BUTTON_PREFIX + currencyPairs[i];
      color textColor = (currencyPairs[i] == currentSymbol) ? clrLime : BUTTON_TEXT_COLOR; // Подсветка текста активной валютной пары
      ObjectSetInteger(0, buttonName, OBJPROP_COLOR, textColor);
   }
}







// установка ордеров
void UpdateLot(string symbol, double delta)
{
   int index = ArraySearch(currencyPairs, symbol); // Используем нашу функцию
   if(index >= 0)
   {
      currentLots[index] += delta;
      if(currentLots[index] > MAX_LOT) currentLots[index] = MAX_LOT;
      if(currentLots[index] < MIN_LOT) currentLots[index] = MIN_LOT;
      ObjectSetString(0, "LotDisplay_" + symbol, OBJPROP_TEXT, DoubleToString(currentLots[index], 2));
   }
}


/*
void OpenOrder(string symbol, int type) // type: OP_BUY или OP_SELL
{
   int index = ArraySearch(currencyPairs, symbol); // Используем нашу функцию
   if(index >= 0)
   {
      double lot = currentLots[index];
      int ticket = OrderSend(symbol, type, lot, MarketInfo(symbol, (type == OP_BUY) ? MODE_ASK : MODE_BID), 3, 0, 0, "Order by Panel", 0, 0, (type == OP_BUY) ? clrGreen : clrRed);
      
      if (ticket < 0) {  Print("Ошибка открытия ордера: ", GetLastError()); }
      if (ticket > 0) {  CreateLabelOrders();  }  // Если ордер успешно открыт, создаем метку
   
   }
}*/
void OpenOrder(string symbol, int type) // type: OP_BUY или OP_SELL
{
   int index = ArraySearch(currencyPairs, symbol); // Используем нашу функцию
   if(index >= 0)
   {
      double lot = currentLots[index];
      int ticket = OrderSend(symbol, type, lot, MarketInfo(symbol, (type == OP_BUY) ? MODE_ASK : MODE_BID), 3, 0, 0, "Order by Panel", 0, 0, (type == OP_BUY) ? clrGreen : clrRed);
      
      if (ticket < 0) {  Print("Ошибка открытия ордера: ", GetLastError()); }
      if (ticket > 0) {  CreateLabelOrders();  }  // Если ордер успешно открыт, создаем метку
   }
}




// Пересчет валюты депозита в пункты с учетом лота
double CalculatePipsFromCurrency(double valueInCurrency, string symbol, double lot)
{
   double tickValue = MarketInfo(symbol, MODE_TICKVALUE); // Стоимость тика на 1 лот
   double tickSize = MarketInfo(symbol, MODE_TICKSIZE);   // Размер тика

   if (tickValue > 0 && tickSize > 0 && lot > 0)
   {
      return valueInCurrency / (tickValue * lot); 
   }
   return 0; // Если данные недоступны
}

void SetStopLoss(int ticket, double slCurrency)
{
   if (OrderSelect(ticket, SELECT_BY_TICKET))
   {
      string symbol = OrderSymbol();
      double lot = OrderLots();
      double slPips = CalculatePipsFromCurrency(slCurrency, symbol, lot);

      if (slPips > 0)
      {
         double slPrice = 0;
         double tickSize = MarketInfo(symbol, MODE_TICKSIZE);

         if (OrderType() == OP_BUY)
         {
            slPrice = OrderOpenPrice() - slPips * tickSize;
         }
         else if (OrderType() == OP_SELL)
         {
            slPrice = OrderOpenPrice() + slPips * tickSize;
         }

         ticket = OrderModify(ticket, OrderOpenPrice(), slPrice, OrderTakeProfit(), 0, clrNONE);
      }
   }
}

void SetTakeProfit(int ticket, double tpCurrency)
{
   if (OrderSelect(ticket, SELECT_BY_TICKET))
   {
      string symbol = OrderSymbol();
      double lot = OrderLots();
      double tpPips = CalculatePipsFromCurrency(tpCurrency, symbol, lot);

      if (tpPips > 0)
      {
         double tpPrice = 0;
         double tickSize = MarketInfo(symbol, MODE_TICKSIZE);

         if (OrderType() == OP_BUY)
         {
            tpPrice = OrderOpenPrice() + tpPips * tickSize;
         }
         else if (OrderType() == OP_SELL)
         {
            tpPrice = OrderOpenPrice() - tpPips * tickSize;
         }

         ticket = OrderModify(ticket, OrderOpenPrice(), OrderStopLoss(), tpPrice, 0, clrNONE);
      }
   }
}


// Функция для переворота ордера
void ReverseOrder(int ticket)
{
   
   if (OrderSelect(ticket, SELECT_BY_TICKET))
   {
      double lotSize = OrderLots();
      double openPrice = OrderOpenPrice();
      int orderType = OrderType();
      string symbol = OrderSymbol();

      // Закрываем текущий ордер
      if (OrderClose(ticket, lotSize, OrderClosePrice(), 3, clrRed))
      {
         // Открываем противоположный ордер
         int newOrderType = (orderType == OP_BUY) ? OP_SELL : OP_BUY;
         double newPrice = (newOrderType == OP_BUY) ? Ask : Bid;
         ticket = OrderSend(symbol, newOrderType, lotSize, newPrice, 3, 0, 0, "Reversed Order", 0, 0, clrBlue);
      }
   }
}



































//=================================================================================================


void CreateLabelOrders()
{
   // Удаляем старые объекты
   DeleteObjects(-1, "", true);

   //string currentSymbol = Symbol();
   int totalOrders = OrdersTotal();

   for (int i = 0; i < totalOrders; i++)
   {
      if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if (OrderSymbol() != currentSymbol) continue;

         int ticket = OrderTicket();
         string bgName = "OrderBG_" + IntegerToString(ticket);
         string textName = "OrderText_" + IntegerToString(ticket);
         string profitName = "OrderProfit_" + IntegerToString(ticket);
         string buttonName = "OrderCloseBtn_" + IntegerToString(ticket);
         string stopLossButtonName = "OrderStopLossBtn_" + IntegerToString(ticket);
         string takeProfitButtonName = "OrderTakeProfitBtn_" + IntegerToString(ticket);
         string reverseButtonName = "OrderReverseBtn_" + IntegerToString(ticket);
         double openPrice = OrderOpenPrice();
         double stopLoss = OrderStopLoss();
         double takeProfit = OrderTakeProfit();

         bool isBuy = OrderType() == OP_BUY;
         color bgColor = C'20,20,20'; // Цвет фона
         color borderColor = C'40,40,40'; // Цвет границы

         // Рассчитываем прибыль
         double profit = OrderProfit() + OrderSwap() + OrderCommission();
         string profitText = "Profit: " + DoubleToString(profit, 2);
         color profitColor = (profit >= 0) ? clrLime : clrRed; // Зеленый для положительной прибыли, красный для отрицательной

         // Формируем текст для основной метки
         string orderText = (isBuy ? "BUY" : "SELL") + " Lot: " + DoubleToString(OrderLots(), 2);

         // Переводим цену в координаты экрана
         int x, y;
         ChartTimePriceToXY(0, 0, TimeCurrent(), openPrice, x, y);

         // === ФОН ===
         if (ObjectCreate(0, bgName, OBJ_RECTANGLE_LABEL, 0, 0, 0))
         {
            ObjectSetInteger(0, bgName, OBJPROP_COLOR, borderColor); // цвет границы фона
            ObjectSetInteger(0, bgName, OBJPROP_BGCOLOR, bgColor); // цвет фона
            ObjectSetInteger(0, bgName, OBJPROP_CORNER, 0);
            ObjectSetInteger(0, bgName, OBJPROP_XSIZE, 200); // Фиксированная ширина фона
            ObjectSetInteger(0, bgName, OBJPROP_YSIZE, 25);
            ObjectSetInteger(0, bgName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, bgName, OBJPROP_BORDER_TYPE, BORDER_FLAT);
            ObjectSetInteger(0, bgName, OBJPROP_XDISTANCE, x + 20);
            ObjectSetInteger(0, bgName, OBJPROP_YDISTANCE, y - 15);
         }

         // === ОСНОВНОЙ ТЕКСТ ===
         if (ObjectCreate(0, textName, OBJ_LABEL, 0, 0, 0))
         {
            ObjectSetInteger(0, textName, OBJPROP_COLOR, clrWhite); // Белый цвет для основного текста
            ObjectSetInteger(0, textName, OBJPROP_FONTSIZE, 10);
            ObjectSetString(0, textName, OBJPROP_TEXT, orderText);
            ObjectSetInteger(0, textName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, textName, OBJPROP_XDISTANCE, x + 35);
            ObjectSetInteger(0, textName, OBJPROP_YDISTANCE, y - 10);
         }

         // === ТЕКСТ ПРИБЫЛИ ===
         if (ObjectCreate(0, profitName, OBJ_LABEL, 0, 0, 0))
         {
            ObjectSetInteger(0, profitName, OBJPROP_COLOR, profitColor); // Цвет текста прибыли
            ObjectSetInteger(0, profitName, OBJPROP_FONTSIZE, 10);
            ObjectSetString(0, profitName, OBJPROP_TEXT, profitText);
            ObjectSetInteger(0, profitName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, profitName, OBJPROP_XDISTANCE, x + 135); // Сдвигаем текст прибыли вправо
            ObjectSetInteger(0, profitName, OBJPROP_YDISTANCE, y - 10);
         }

         // === КНОПКА "X" ===
         if (ObjectCreate(0, buttonName, OBJ_BUTTON, 0, 0, 0))
         {
            ObjectSetInteger(0, buttonName, OBJPROP_COLOR, clrLavender);
            ObjectSetInteger(0, buttonName, OBJPROP_BGCOLOR, clrRed);
            ObjectSetInteger(0, buttonName, OBJPROP_XSIZE, 23);
            ObjectSetInteger(0, buttonName, OBJPROP_YSIZE, 23);
            ObjectSetInteger(0, buttonName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, buttonName, OBJPROP_BORDER_TYPE, BORDER_FLAT);
            ObjectSetString(0, buttonName, OBJPROP_TEXT, "X");
            ObjectSetInteger(0, buttonName, OBJPROP_XDISTANCE, x + 371); // Сдвигаем кнопку вправо
            ObjectSetInteger(0, buttonName, OBJPROP_YDISTANCE, y - 14);
         }

         // === КНОПКА "StopLoss" ===
         if (ObjectCreate(0, stopLossButtonName, OBJ_BUTTON, 0, 0, 0))
         {
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_COLOR, clrLavender);
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_BGCOLOR, bgColor); // Цвет фона как у метки
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_XSIZE, 30);
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_YSIZE, 25);
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_BORDER_TYPE, BORDER_FLAT); // Граница как у метки
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_BORDER_COLOR, borderColor); // Цвет границы как у метки
            ObjectSetString(0, stopLossButtonName, OBJPROP_TEXT, "SL");
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_XDISTANCE, x + 225); // Сдвигаем кнопку вправо
            ObjectSetInteger(0, stopLossButtonName, OBJPROP_YDISTANCE, y - 10);
            ChartRedraw();
         }

         // === КНОПКА "TakeProfit" ===
         if (ObjectCreate(0, takeProfitButtonName, OBJ_BUTTON, 0, 0, 0))
         {
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_COLOR, clrLavender);
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_BGCOLOR, bgColor); // Цвет фона как у метки
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_XSIZE, 30);
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_YSIZE, 25);
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_BORDER_TYPE, BORDER_FLAT); // Граница как у метки
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_BORDER_COLOR, borderColor); // Цвет границы как у метки
            ObjectSetString(0, takeProfitButtonName, OBJPROP_TEXT, "TP");
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_XDISTANCE, x + 260); // Сдвигаем кнопку вправо
            ObjectSetInteger(0, takeProfitButtonName, OBJPROP_YDISTANCE, y - 13);
            ChartRedraw();
         }

         // === КНОПКА "Reverse" ===
         if (ObjectCreate(0, reverseButtonName, OBJ_BUTTON, 0, 0, 0))
         {
            ObjectSetInteger(0, reverseButtonName, OBJPROP_COLOR, clrLavender);
            ObjectSetInteger(0, reverseButtonName, OBJPROP_BGCOLOR, bgColor); // Цвет фона как у метки
            ObjectSetInteger(0, reverseButtonName, OBJPROP_XSIZE, 70);
            ObjectSetInteger(0, reverseButtonName, OBJPROP_YSIZE, 25);
            ObjectSetInteger(0, reverseButtonName, OBJPROP_HIDDEN, false);
            ObjectSetInteger(0, reverseButtonName, OBJPROP_BORDER_TYPE, BORDER_FLAT); // Граница как у метки
            ObjectSetInteger(0, reverseButtonName, OBJPROP_BORDER_COLOR, borderColor); // Цвет границы как у метки
            ObjectSetString(0, reverseButtonName, OBJPROP_TEXT, "Reverse");
            ObjectSetInteger(0, reverseButtonName, OBJPROP_XDISTANCE, x + 295); // Сдвигаем кнопку вправо
            ObjectSetInteger(0, reverseButtonName, OBJPROP_YDISTANCE, y - 13);
            ChartRedraw();
         }
         
         
         // === Метка Stop Loss ===
         if (stopLoss > 0)
         {
            string slTextName = "SLText_" + IntegerToString(ticket);
            string slButtonName = "SLButton_" + IntegerToString(ticket);
            int xSL, ySL;
            ChartTimePriceToXY(0, 0, TimeCurrent(), stopLoss, xSL, ySL);

            if (ObjectCreate(0, slTextName, OBJ_LABEL, 0, 0, 0))
            {
               ObjectSetInteger(0, slTextName, OBJPROP_COLOR, clrRed);
               ObjectSetInteger(0, slTextName, OBJPROP_FONTSIZE, 10);
               ObjectSetString(0, slTextName, OBJPROP_TEXT, "SL: " + DoubleToString(stopLoss, 2));
               ObjectSetInteger(0, slTextName, OBJPROP_XDISTANCE, xSL + 20);
               ObjectSetInteger(0, slTextName, OBJPROP_YDISTANCE, ySL - 10);
            }

            if (ObjectCreate(0, slButtonName, OBJ_BUTTON, 0, 0, 0))
            {
               ObjectSetInteger(0, slButtonName, OBJPROP_COLOR, clrWhite);
               ObjectSetInteger(0, slButtonName, OBJPROP_BGCOLOR, clrRed);
               ObjectSetInteger(0, slButtonName, OBJPROP_XSIZE, 20);
               ObjectSetInteger(0, slButtonName, OBJPROP_YSIZE, 20);
               ObjectSetString(0, slButtonName, OBJPROP_TEXT, "X");
               ObjectSetInteger(0, slButtonName, OBJPROP_XDISTANCE, xSL + 60);
               ObjectSetInteger(0, slButtonName, OBJPROP_YDISTANCE, ySL - 10);
            }
         }
         
         
         // === Метка Take Profit ===
         if (takeProfit > 0)
         {
            string tpTextName = "TPText_" + IntegerToString(ticket);
            string tpButtonName = "TPButton_" + IntegerToString(ticket);
            int xTP, yTP;
            ChartTimePriceToXY(0, 0, TimeCurrent(), takeProfit, xTP, yTP);

            if (ObjectCreate(0, tpTextName, OBJ_LABEL, 0, 0, 0))
            {
               ObjectSetInteger(0, tpTextName, OBJPROP_COLOR, clrLime);
               ObjectSetInteger(0, tpTextName, OBJPROP_FONTSIZE, 10);
               ObjectSetString(0, tpTextName, OBJPROP_TEXT, "TP: " + DoubleToString(takeProfit, 2));
               ObjectSetInteger(0, tpTextName, OBJPROP_XDISTANCE, xTP + 20);
               ObjectSetInteger(0, tpTextName, OBJPROP_YDISTANCE, yTP - 10);
            }

            if (ObjectCreate(0, tpButtonName, OBJ_BUTTON, 0, 0, 0))
            {
               ObjectSetInteger(0, tpButtonName, OBJPROP_COLOR, clrWhite);
               ObjectSetInteger(0, tpButtonName, OBJPROP_BGCOLOR, clrGreen);
               ObjectSetInteger(0, tpButtonName, OBJPROP_XSIZE, 20);
               ObjectSetInteger(0, tpButtonName, OBJPROP_YSIZE, 20);
               ObjectSetString(0, tpButtonName, OBJPROP_TEXT, "X");
               ObjectSetInteger(0, tpButtonName, OBJPROP_XDISTANCE, xTP + 60);
               ObjectSetInteger(0, tpButtonName, OBJPROP_YDISTANCE, yTP - 10);
            }
         }

         
      }
   }
   ChartRedraw();
}



//=================================================================================================





void UpdateOrderLabels()
{
   int totalOrders = OrdersTotal();
   string activeOrders;
   
   for (int i = 0; i < totalOrders; i++)
   {
      if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
      {
         int ticket = OrderTicket();
         activeOrders += IntegerToString(ticket) + ";";
         string bgName = "OrderBG_" + IntegerToString(ticket);
         string textName = "OrderText_" + IntegerToString(ticket);
         string profitName = "OrderProfit_" + IntegerToString(ticket);
         string buttonName = "OrderCloseBtn_" + IntegerToString(ticket);
         string stopLossButtonName = "OrderStopLossBtn_" + IntegerToString(ticket);
         string takeProfitButtonName = "OrderTakeProfitBtn_" + IntegerToString(ticket);
         string reverseButtonName = "OrderReverseBtn_" + IntegerToString(ticket);
         double openPrice = OrderOpenPrice();
         double stopLoss = OrderStopLoss();
         double takeProfit = OrderTakeProfit();


         // Рассчитываем прибыль
         double profit = OrderProfit() + OrderSwap() + OrderCommission();
         string profitText = "Profit: " + DoubleToString(profit, 2);
         color profitColor = (profit >= 0) ? clrLime : clrRed; // Зеленый для положительной прибыли, красный для отрицательной

         int x, y;
         ChartTimePriceToXY(0, 0, TimeCurrent(), openPrice, x, y);

         // Создаем или обновляем объекты
         if (ObjectFind(bgName) < 0) ObjectCreate(0, bgName, OBJ_RECTANGLE_LABEL, 0, 0, 0);
         if (ObjectFind(textName) < 0) ObjectCreate(0, textName, OBJ_LABEL, 0, 0, 0);
         if (ObjectFind(profitName) < 0) ObjectCreate(0, profitName, OBJ_LABEL, 0, 0, 0);
         if (ObjectFind(buttonName) < 0) ObjectCreate(0, buttonName, OBJ_BUTTON, 0, 0, 0);
         if (ObjectFind(stopLossButtonName) < 0) ObjectCreate(0, stopLossButtonName, OBJ_BUTTON, 0, 0, 0);
         if (ObjectFind(takeProfitButtonName) < 0) ObjectCreate(0, takeProfitButtonName, OBJ_BUTTON, 0, 0, 0);
         if (ObjectFind(reverseButtonName) < 0) ObjectCreate(0, reverseButtonName, OBJ_BUTTON, 0, 0, 0);

         // Устанавливаем свойства объектов
         ObjectSetInteger(0, bgName, OBJPROP_XDISTANCE, x + 20);
         ObjectSetInteger(0, bgName, OBJPROP_YDISTANCE, y - 15);
         ObjectSetInteger(0, textName, OBJPROP_XDISTANCE, x + 35);
         ObjectSetInteger(0, textName, OBJPROP_YDISTANCE, y - 10);
         ObjectSetString(0, profitName, OBJPROP_TEXT, profitText);
         ObjectSetInteger(0, profitName, OBJPROP_COLOR, profitColor);
         ObjectSetInteger(0, profitName, OBJPROP_XDISTANCE, x + 135);
         ObjectSetInteger(0, profitName, OBJPROP_YDISTANCE, y - 10);
         
         ObjectSetInteger(0, buttonName, OBJPROP_XDISTANCE, x + 371);
         ObjectSetInteger(0, buttonName, OBJPROP_YDISTANCE, y - 14);
         
         ObjectSetInteger(0, stopLossButtonName, OBJPROP_XDISTANCE, x + 225);
         ObjectSetInteger(0, stopLossButtonName, OBJPROP_YDISTANCE, y - 15);
         
         ObjectSetInteger(0, takeProfitButtonName, OBJPROP_XDISTANCE, x + 260);
         ObjectSetInteger(0, takeProfitButtonName, OBJPROP_YDISTANCE, y - 15);
         
         ObjectSetInteger(0, reverseButtonName, OBJPROP_XDISTANCE, x + 295);
         ObjectSetInteger(0, reverseButtonName, OBJPROP_YDISTANCE, y - 15);
         
         // === Метка Take Profit ===
         if (takeProfit > 0)
         {
            string tpTextName = "TPText_" + IntegerToString(ticket);
            string tpButtonName = "TPButton_" + IntegerToString(ticket);
            int xTP, yTP;
            ChartTimePriceToXY(0, 0, TimeCurrent(), takeProfit, xTP, yTP);

            if (ObjectCreate(0, tpTextName, OBJ_LABEL, 0, 0, 0))
            {
               ObjectSetInteger(0, tpTextName, OBJPROP_COLOR, clrLime);
               ObjectSetInteger(0, tpTextName, OBJPROP_FONTSIZE, 10);
               ObjectSetString(0, tpTextName, OBJPROP_TEXT, "TP: " + DoubleToString(takeProfit, 2));
               ObjectSetInteger(0, tpTextName, OBJPROP_XDISTANCE, xTP + 20);
               ObjectSetInteger(0, tpTextName, OBJPROP_YDISTANCE, yTP - 10);
            }

            if (ObjectCreate(0, tpButtonName, OBJ_BUTTON, 0, 0, 0))
            {
               ObjectSetInteger(0, tpButtonName, OBJPROP_COLOR, clrWhite);
               ObjectSetInteger(0, tpButtonName, OBJPROP_BGCOLOR, clrGreen);
               ObjectSetInteger(0, tpButtonName, OBJPROP_XSIZE, 20);
               ObjectSetInteger(0, tpButtonName, OBJPROP_YSIZE, 20);
               ObjectSetString(0, tpButtonName, OBJPROP_TEXT, "X");
               ObjectSetInteger(0, tpButtonName, OBJPROP_XDISTANCE, xTP + 60);
               ObjectSetInteger(0, tpButtonName, OBJPROP_YDISTANCE, yTP - 10);
            }
         }
         
         // === Метка Stop Loss ===
         if (stopLoss > 0)
         {
            string slTextName = "SLText_" + IntegerToString(ticket);
            string slButtonName = "SLButton_" + IntegerToString(ticket);
            int xSL, ySL;
            ChartTimePriceToXY(0, 0, TimeCurrent(), stopLoss, xSL, ySL);

            if (ObjectCreate(0, slTextName, OBJ_LABEL, 0, 0, 0))
            {
               ObjectSetInteger(0, slTextName, OBJPROP_COLOR, clrRed);
               ObjectSetInteger(0, slTextName, OBJPROP_FONTSIZE, 10);
               ObjectSetString(0, slTextName, OBJPROP_TEXT, "SL: " + DoubleToString(stopLoss, 2));
               ObjectSetInteger(0, slTextName, OBJPROP_XDISTANCE, xSL + 20);
               ObjectSetInteger(0, slTextName, OBJPROP_YDISTANCE, ySL - 10);
            }

            if (ObjectCreate(0, slButtonName, OBJ_BUTTON, 0, 0, 0))
            {
               ObjectSetInteger(0, slButtonName, OBJPROP_COLOR, clrWhite);
               ObjectSetInteger(0, slButtonName, OBJPROP_BGCOLOR, clrRed);
               ObjectSetInteger(0, slButtonName, OBJPROP_XSIZE, 20);
               ObjectSetInteger(0, slButtonName, OBJPROP_YSIZE, 20);
               ObjectSetString(0, slButtonName, OBJPROP_TEXT, "X");
               ObjectSetInteger(0, slButtonName, OBJPROP_XDISTANCE, xSL + 60);
               ObjectSetInteger(0, slButtonName, OBJPROP_YDISTANCE, ySL - 10);
            }
         }
         
         
         
         
         
      }
   }

   // Удаляем объекты для неактивных ордеров
   DeleteObjects(-1, activeOrders, true);
   ChartRedraw();
}




























void DeleteObjects(int ticket = -1, string activeOrders = "", bool deleteArrows = false)
{
   int totalObjects = ObjectsTotal();
   for (int i = totalObjects - 1; i >= 0; i--)
   {
      string objName = ObjectName(i);

      // Проверяем, что объект относится к ордерам, кнопкам или стрелкам
      bool isOrderObject = (StringFind(objName, "OrderBG_") == 0 ||
                            StringFind(objName, "OrderText_") == 0 ||
                            StringFind(objName, "OrderProfit_") == 0 ||
                            StringFind(objName, "OrderCloseBtn_") == 0 ||
                            StringFind(objName, "OrderStopLossBtn_") == 0 ||
                            StringFind(objName, "OrderTakeProfitBtn_") == 0 ||
                            StringFind(objName, "OrderReverseBtn_") == 0);

      bool isArrow = (deleteArrows && ObjectGetInteger(0, objName, OBJPROP_TYPE) == OBJ_ARROW);

      if (isOrderObject || isArrow)
      {
         // Если передан ticket, удаляем объекты только для этого ордера
         if (ticket != -1 && isOrderObject)
         {
            // Извлекаем тикет из названия объекта
            int objTicket = (int)StringToInteger(StringSubstr(objName, StringFind(objName, "_") + 1));
            if (objTicket == ticket)
            {
               ObjectDelete(0, objName);
            }
         }
         // Если передан список активных ордеров, удаляем объекты для неактивных ордеров
         else if (activeOrders != "" && isOrderObject)
         {
            int objTicket = (int)StringToInteger(StringSubstr(objName, StringFind(objName, "_") + 1));
            if (StringFind(activeOrders, IntegerToString(objTicket)) == -1)
            {
               ObjectDelete(0, objName);
            }
         }
         // Если параметры не переданы, удаляем все объекты
         else
         {
            ObjectDelete(0, objName);
         }
      }
   }
}




















// === Создание кастомной линии Bid ===
void CreateBidLine()
{
    string lineName = "CustomBidLine";
    double bidPrice = Bid;
    
    // Удаляем старую линию (если есть)
    ObjectDelete(lineName);
    
    // Создаём новую
    if (ObjectCreate(0, lineName, OBJ_TREND, 0, TimeCurrent(), bidPrice, TimeCurrent() + PeriodSeconds(), bidPrice))
    {
        ObjectSetInteger(0, lineName, OBJPROP_COLOR, clrRed); // Цвет линии
        ObjectSetInteger(0, lineName, OBJPROP_WIDTH, 2); // Толщина
        ObjectSetInteger(0, lineName, OBJPROP_RAY_RIGHT, true); // Линия продолжается вправо
        ObjectSetInteger(0, lineName, OBJPROP_HIDDEN, false); // Не скрываем объект
        ObjectSetInteger(0, lineName, OBJPROP_BACK, false); // Линия поверх графика
    }
}

// === Обновление линии Bid ===
void UpdateBidLine()
{
    string lineName = "CustomBidLine";
    double bidPrice = Bid;
    
    if (ObjectFind(0, lineName) >= 0) // Если линия есть
    {
        ObjectSetDouble(0, lineName, OBJPROP_PRICE1, bidPrice);
        ObjectSetDouble(0, lineName, OBJPROP_PRICE2, bidPrice);
    }
}






















































// Функция создания фона
void CreatePanel()
{
   if(ObjectFind(PANEL_NAME) >= 0)
      return;
   
   if(!ObjectCreate(0, PANEL_NAME, OBJ_RECTANGLE_LABEL, 0, 0, 0))
   {
      Print("Ошибка создания объекта панели");
      return;
   }
   
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_XSIZE, PANEL_WIDTH);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_YSIZE, PANEL_HEIGHT);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_COLOR, PANEL_BORDER_COLOR);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_WIDTH, PANEL_BORDER_WIDTH);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_CORNER, 0);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_BACK, false); // Устанавливаем панель на передний план
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_HIDDEN, false);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_SELECTABLE, false);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_SELECTED, false);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_BGCOLOR, PANEL_BG_COLOR);
   ObjectSetInteger(0, PANEL_NAME, OBJPROP_ZORDER, 100); // Высокий ZORDER для панели
   
   UpdatePanel();
   CreateCurrencyButtons();
}






// Обработчик событий кнопок
void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam)
{
   if(id == CHARTEVENT_OBJECT_CLICK)
   {
      if(StringFind(sparam, BUTTON_PREFIX) == 0)
      {
         string symbol = StringSubstr(sparam, StringLen(BUTTON_PREFIX));
         ChartSetSymbolPeriod(0, symbol, PERIOD_CURRENT); // Открываем график в текущем окне
         currentSymbol = symbol; // Обновляем текущий символ
         UpdateButtonColors(); // Обновляем цвета кнопок
         ObjectSetInteger(0, sparam, OBJPROP_STATE, false); } // Сбрасываем состояние кнопки
      
      
      
      
      for(int i = 0; i < ArraySize(currencyPairs); i++){string symbol = currencyPairs[i];
         if(sparam == "SellButton_" + symbol){OpenOrder(symbol, OP_SELL);}
    else if(sparam == "BuyButton_" + symbol){ OpenOrder(symbol, OP_BUY);}  
            
    else if(sparam == "Minus0.1_" + symbol) { UpdateLot(symbol, -0.1);  }  
    else if(sparam == "Minus0.01_" + symbol) { UpdateLot(symbol, -0.01); }  
         
    else if(sparam == "Plus0.01_" + symbol) {  UpdateLot(symbol, 0.01); } 
    else if(sparam == "Plus0.1_" + symbol) { UpdateLot(symbol, 0.1); } }  }  
         
   
   else if(id == CHARTEVENT_CHART_CHANGE)
   {
      currentSymbol = Symbol(); // Обновляем текущий символ
      UpdateButtonColors(); // Обновляем цвета кнопок
      UpdatePanel();
      CreateLabelOrders();
      UpdateOrderLabels();
      ChartRedraw();
   }
   
   
   
   
   
   // Если нажата кнопка "X"
   if (id == CHARTEVENT_OBJECT_CLICK && StringFind(sparam, "OrderCloseBtn_") == 0)
   {
      int ticket = (int)StringToInteger(StringSubstr(sparam, StringLen("OrderCloseBtn_")));
      if (OrderClose(ticket, OrderLots(), OrderClosePrice(), 3, clrRed))
      {
         DeleteObjects(ticket);
      }
   }

   // Если нажата кнопка "StopLoss"
   if (id == CHARTEVENT_OBJECT_CLICK && StringFind(sparam, "OrderStopLossBtn_") == 0)
   {
      int ticket = (int)StringToInteger(StringSubstr(sparam, StringLen("OrderStopLossBtn_")));
      SetStopLoss(ticket, StopLossCurrency);
      
   }

   // Если нажата кнопка "TakeProfit"
   if (id == CHARTEVENT_OBJECT_CLICK && StringFind(sparam, "OrderTakeProfitBtn_") == 0)
   {
      int ticket = (int)StringToInteger(StringSubstr(sparam, StringLen("OrderTakeProfitBtn_")));
      SetTakeProfit(ticket, TakeProfitCurrency);
      
   }

   // Если нажата кнопка "Reverse"
   if (id == CHARTEVENT_OBJECT_CLICK && StringFind(sparam, "OrderReverseBtn_") == 0)
   {
      int ticket = (int)StringToInteger(StringSubstr(sparam, StringLen("OrderReverseBtn_")));
      ReverseOrder(ticket);
      DeleteObjects(ticket); // Удаляем метки для закрытого ордера
      CreateLabelOrders();
      UpdateOrderLabels();
      ChartRedraw();
   }
  
   // sltp
   if (id == CHARTEVENT_OBJECT_CLICK)
   {
      if (StringFind(sparam, "SLButton_") == 0)
      {
         int ticket = (int)StringToInteger(StringSubstr(sparam, 9));
         if (OrderSelect(ticket, SELECT_BY_TICKET))
         {
            if (OrderModify(ticket, OrderOpenPrice(), 0, OrderTakeProfit(), 0, clrNONE))
            {
               ObjectDelete("SLText_" + IntegerToString(ticket));
               ObjectDelete("SLButton_" + IntegerToString(ticket));
               UpdateOrderLabels();
            }
         }
      }
      else if (StringFind(sparam, "TPButton_") == 0)
      {
         int ticket = (int)StringToInteger(StringSubstr(sparam, 9));
         if (OrderSelect(ticket, SELECT_BY_TICKET))
         {
            if (OrderModify(ticket, OrderOpenPrice(), OrderStopLoss(), 0, 0, clrNONE))
            {
               ObjectDelete("TPText_" + IntegerToString(ticket));
               ObjectDelete("TPButton_" + IntegerToString(ticket));
               UpdateOrderLabels();
            }
         }
      }
   }
   
   
   
}




























void OnTimer()
{
    int chartWidth = (int)ChartGetInteger(0, CHART_WIDTH_IN_PIXELS);
    int chartHeight = (int)ChartGetInteger(0, CHART_HEIGHT_IN_PIXELS);

    if (chartWidth != prevChartWidth || chartHeight != prevChartHeight)
    {
        prevChartWidth = chartWidth;
        prevChartHeight = chartHeight;

        UpdateOrderLabels();
        ChartRedraw();
    }
}



























// Инициализация скрипта
int OnInit()
{
   ArrayResize(currentLots, ArraySize(currencyPairs));
   ArrayInitialize(currentLots, 0.01); // Устанавливаем начальный лот 0.1 для всех пар
   EventSetTimer(1); // Устанавливаем таймер на 1 секунду
   
   CreatePanel();
   currentSymbol = Symbol();     // Устанавливаем текущий символ
   CreateCurrencyButtons();      // Создаем заголовки и кнопки
   UpdateButtonColors();         // Обновляем цвета кнопок
   CreateTradeControls();        // Добавляем создание кнопок для управления лотом
   CreateLabelOrders();          // Создаем метки на ордерах
   UpdateOrderLabels();          // Обновляем метки на ордерах
   

   return INIT_SUCCEEDED;
}


















void OnDeinit(const int reason)
{
   ObjectDelete(PANEL_NAME);
   for(int i = 0; i < ArraySize(currencyPairs); i++)
   {
      string symbol = currencyPairs[i];
      ObjectDelete(BUTTON_PREFIX + symbol);
      ObjectDelete(SPREAD_PREFIX + symbol);
      ObjectDelete(PROFIT_PREFIX + symbol);
      ObjectDelete(LOT_BUY_PREFIX + symbol);
      ObjectDelete(PROFIT_BUY_PREFIX + symbol);
      ObjectDelete(LOT_SELL_PREFIX + symbol);
      ObjectDelete(PROFIT_SELL_PREFIX + symbol);
      ObjectDelete("SellButton_" + symbol);
      ObjectDelete("Minus0.1_" + symbol);
      ObjectDelete("Minus0.01_" + symbol);
      ObjectDelete("LotDisplay_" + symbol);
      ObjectDelete("Plus0.01_" + symbol);
      ObjectDelete("Plus0.1_" + symbol);
      ObjectDelete("BuyButton_" + symbol);
   }
   ObjectDelete(HEADER_PREFIX + "Spread");
   ObjectDelete(HEADER_PREFIX + "Trades");
   ObjectDelete(HEADER_PREFIX + "Profit");
   ObjectDelete(HEADER_PREFIX + "BUY");
   ObjectDelete(HEADER_PREFIX + "SELL");
   ObjectDelete(HEADER_PREFIX + "OpenOrders"); // Удаляем заголовок OPEN ORDERS
   
   ObjectDelete("TotalProfitLabel"); // Удаляем TotalProfitLabel
   ObjectDelete("TotalProfitValue"); // Удаляем TotalProfitValue
   
   string labelName = "OrderLabel_" + IntegerToString(OrderTicket());
   string buttonName = "OrderCloseBtn_" + IntegerToString(OrderTicket());
   
   ObjectDelete(labelName);
   ObjectDelete(buttonName);
   
   EventKillTimer(); // Очищаем таймер при удалении советника
   
   int totalObjects = ObjectsTotal();
   for (int i = totalObjects - 1; i >= 0; i--)
   {
      string objName = ObjectName(i);
      if (StringFind(objName, "OrderBG_") == 0 || 
          StringFind(objName, "OrderText_") == 0 || 
          StringFind(objName, "OrderCloseBtn_") == 0 ||
          StringFind(objName, "OrderSL_") == 0 || 
          StringFind(objName, "OrderTP_") == 0 || 
          StringFind(objName, "OrderReverse_") == 0 ||
          objName == "CustomBidLine") // Удаляем кастомную линию Bid
      {
         ObjectDelete(objName);
      }
   } 
   
   DeleteObjects(); // Удаляем метки для закрытого ордера
   ChartRedraw();  // Принудительное обновление графика
}
















void OnTick()
{
   ChartRedraw();
   UpdateSpreads();
   UpdateProfits();
   UpdateBuyColumns();
   UpdateSellColumns();
   UpdateOrderLabels();

   // Обновляем общую прибыль
   double totalProfit = CalculateTotalProfit();
   ObjectSetString(0, "TotalProfitValue", OBJPROP_TEXT, DoubleToString(totalProfit, 2));

   // Изменение цвета текста в зависимости от прибыли
   if(totalProfit == 0) // Если прибыль равна нулю
      ObjectSetInteger(0, "TotalProfitValue", OBJPROP_COLOR, clrLavender);
   else if(totalProfit > 0) // Если прибыль положительная
      ObjectSetInteger(0, "TotalProfitValue", OBJPROP_COLOR, clrLime);
   else // Если прибыль отрицательная
      ObjectSetInteger(0, "TotalProfitValue", OBJPROP_COLOR, clrRed);
      
   if (ObjectFind(0, "CustomBidLine") < 0) // Если линия BID не создана
   CreateBidLine();
   UpdateBidLine();
      
   
   
 
      
}




